const fs = require('fs').promises;

// Top-tier kategorie Ovoko (tylko level 1, parent_id = "0")
const OVOKO_TOP_TIER_CATEGORIES = {
    "1": {
        name: "Brake system",
        pl: "Uk≈Çad hamulcowy",
        keywords: [
            "hamulcowy", "hamulce", "ABS", "ESP", "hamulec", "postojowe", "bremza"
        ]
    },
    "98": {
        name: "Headlight/headlamp washing/cleaning system",
        pl: "Wycieraczki i spryskiwacze szyb i ≈õwiate≈Ç",
        keywords: [
            "mycia", "mycie", "spryskiwacze", "wycieraczki", "spryskiwacz", "wycieraczka", "szyby", "okna"
        ]
    },
    "134": {
        name: "Lighting system",
        pl: "O≈õwietlenie",
        keywords: [
            "o≈õwietlenie", "≈õwiat≈Ça", "reflektory", "lampy", "klaksony", "≈õwiat≈Ço", "lampa"
        ]
    },
    "197": {
        name: "Air conditioning-heating system/radiators",
        pl: "Uk≈Çad klimatyzacji / Wentylacji / Ch≈Çodzenia silnika / Ogrzewanie postojowe",
        keywords: [
            "ch≈Çodzenia", "ch≈Çodnica", "ch≈Çodnice", "wentylatory", "pompy wody", "klimatyzacja", "ogrzewanie",
            "zbiorniki wyr√≥wnawcze", "przewody ch≈Çodnic", "kierownice powietrza", "intercoolery", "ch≈Çodnice oleju", "ch≈Çodnice wody"
        ]
    },
    "250": {
        name: "Engine",
        pl: "Silnik i osprzƒôt",
        keywords: [
            "silnik", "silniki", "blok", "g≈Çowica", "turbosprƒô≈ºarka", "turbosprƒô≈ºarki", "pompa", "pompy",
            "alternator", "rozrusznik", "modu≈Ç zap≈Çonowy", "cewki zap≈Çonowe", "kolektor", "wa≈Çy korbowe",
            "zawory", "przep≈Çywomierz", "pasek osprzƒôtu", "ko≈Ça pasowe", "os≈Çony silnika", "zawieszenie silnika",
            "poduszki silnika", "recyrkulacja spalin", "EGR", "ch≈Çodnice spalin", "czujniki poziomu oleju",
            "pompy oleju", "zawory podci≈õnienia", "pompy podci≈õnieniowe", "motoryzacja", "samochodowe"
        ]
    },
    "281": {
        name: "Fuel mixture system",
        pl: "Uk≈Çad paliwowy",
        keywords: [
            "paliwowy", "paliwo", "wtryskiwacze", "pompy paliwa", "pompy wtryskowe", "wtrysk", "paliwo",
            "przewody wtryskowe", "przewody paliwa", "podgrzewacze", "benzyna", "diesel", "olej napƒôdowy"
        ]
    },
    "330": {
        name: "Front axle",
        pl: "O≈õ przednia i inne elementy",
        keywords: [
            "zawieszenia", "zawieszenie", "sprƒô≈ºyny", "amortyzatory", "hydrauliczne", "pneumatyczne",
            "sterowniki zawieszenia", "poduszki zawieszenia", "o≈õ", "osi", "przednia", "przedni"
        ]
    },
    "382": {
        name: "Rear axle",
        pl: "O≈õ tylna i inne elementy",
        keywords: [
            "tylna", "tylny", "ty≈Ç", "ty≈Çem", "most tylny", "o≈õ tylna", "osi tylnej"
        ]
    },
    "416": {
        name: "Gearbox/clutch/transmission",
        pl: "Uk≈Çad napƒôdowy",
        keywords: [
            "napƒôdowy", "napƒôdowa", "skrzynie bieg√≥w", "skrzynia bieg√≥w", "mosty", "p√≥≈Çosie", "przeguby",
            "wa≈Çy napƒôdowe", "lewarki", "wybieraki", "smarowanie", "transmisja", "sprzƒôg≈Ço"
        ]
    },
    "463": {
        name: "Wheels/tires/caps",
        pl: "Opony / Felgi / Ko≈Çpaki i inne elementy",
        keywords: [
            "ko≈Ça", "opony", "felgi", "ko≈Çpaki", "opona", "felga", "ko≈Çpak", "ko≈Ço"
        ]
    },
    "498": {
        name: "Exterior front body parts",
        pl: "Elementy przedniej czƒô≈õci nadwozia / karoserii",
        keywords: [
            "maska", "maski", "b≈Çotniki", "b≈Çotnik", "przednia", "przedni", "karoseria", "nadwozie",
            "zderzaki", "zderzak", "drzwi", "drzwi", "listwy", "nak≈Çadki", "progi", "progowe"
        ]
    },
    "541": {
        name: "Exterior rear body parts",
        pl: "Elementy tylnej czƒô≈õci nadwozia / karoserii",
        keywords: [
            "tylna", "tylny", "ty≈Ç", "ty≈Çem", "karoseria tylna", "nadwozie tylne"
        ]
    },
    "579": {
        name: "Door",
        pl: "Drzwi i inne elementy",
        keywords: [
            "drzwi", "drzwi", "drzwi", "drzwi", "drzwi", "drzwi", "drzwi", "drzwi"
        ]
    },
    "624": {
        name: "Body/body parts/hook",
        pl: "Czƒô≈õci nadwozia i karoserii",
        keywords: [
            "karoserii", "karoseria", "nadwozia", "nadwozie", "czƒô≈õci karoserii", "czƒô≈õci nadwozia"
        ]
    },
    "806": {
        name: "Cabin/interior",
        pl: "Wyposa≈ºenie wnƒôtrza samochodu",
        keywords: [
            "wnƒôtrza", "wnƒôtrze", "fotele", "kanapy", "zag≈Ç√≥wki", "nawigacje", "GPS", "wyposa≈ºenie wnƒôtrza",
            "salon", "interior", "kabina"
        ]
    },
    "999": {
        name: "Devices/switches/electronic system",
        pl: "Wyposa≈ºenie elektryczne",
        keywords: [
            "elektryczny", "elektryczna", "elektryczne", "stacyjki", "kluczyki", "czujniki", "sterowniki",
            "przeka≈∫niki", "≈õwiece ≈ºarowe", "modu≈Çy komfortu", "modu≈Çy poduszek", "silniczki", "gniazda zapalniczki",
            "klemy", "kostki", "z≈ÇƒÖczki", "instalacyjne", "zap≈Çon", "zap≈Çonowy", "zap≈Çonowe", "elektryka"
        ]
    },
    "1168": {
        name: "Gas exhaust system",
        pl: "Uk≈Çad wydechowy i inne elementy",
        keywords: [
            "wydechowy", "wydech", "rury wydechowe", "t≈Çumiki", "t≈Çumik", "spaliny", "wydech"
        ]
    },
    "1189": {
        name: "Glass",
        pl: "Szyby / Okna i inne elementy",
        keywords: [
            "szyby", "szyba", "okna", "okno", "przednia szyba", "tylna szyba", "szyba", "okno"
        ]
    },
    "1249": {
        name: "Other parts",
        pl: "Inne czƒô≈õci",
        keywords: [
            "pozosta≈Çe", "pozosta≈Çy", "akcesoria", "akcesorium", "inne", "inny", "pozosta≈Çe", "inne"
        ]
    }
};

// Funkcja do mapowania kategorii na podstawie s≈Ç√≥w kluczowych
function mapCategoryToOvoko(categoryName) {
    if (!categoryName) {
        return OVOKO_TOP_TIER_CATEGORIES["1249"]; // Default fallback
    }
    
    const lowerName = categoryName.toLowerCase();
    
    // Sprawd≈∫ ka≈ºdƒÖ regu≈Çƒô mapowania
    for (const [ovokoId, rule] of Object.entries(OVOKO_TOP_TIER_CATEGORIES)) {
        for (const keyword of rule.keywords) {
            if (lowerName.includes(keyword.toLowerCase())) {
                return {
                    ovoko_id: ovokoId,
                    ovoko_name: rule.name,
                    ovoko_pl: rule.pl,
                    confidence: "keyword_match",
                    matched_keyword: keyword
                };
            }
        }
    }
    
    // Je≈õli nie znaleziono dopasowania, u≈ºyj domy≈õlnej kategorii
    return {
        ovoko_id: "1249",
        ovoko_name: "Other parts",
        ovoko_pl: "Inne czƒô≈õci",
        confidence: "default",
        matched_keyword: "brak dopasowania"
    };
}

// G≈Ç√≥wna funkcja
async function createCorrectMapping() {
    try {
        console.log('üîÑ Tworzenie poprawnego mapowania kategorii (tylko top-tier)...');
        
        // Wczytaj kategorie BaseLinker
        const baselinkerData = JSON.parse(await fs.readFile('baselinker_categories.json', 'utf8'));
        const categories = baselinkerData.data.categories;
        
        console.log(`üìä Znaleziono ${categories.length} kategorii BaseLinker`);
        console.log(`üéØ U≈ºywam tylko ${Object.keys(OVOKO_TOP_TIER_CATEGORIES).length} top-tier kategorii Ovoko`);
        
        // Mapuj ka≈ºdƒÖ kategoriƒô
        const correctMapping = {
            mapping_description: "POPRAWNE mapowanie WSZYSTKICH kategorii BaseLinker na TOP-TIER kategorie Ovoko (level 1)",
            created_at: new Date().toISOString(),
            version: "2.0",
            total_categories: categories.length,
            ovoko_top_tier_categories: Object.keys(OVOKO_TOP_TIER_CATEGORIES).length,
            mapping_rules: OVOKO_TOP_TIER_CATEGORIES,
            categories: {}
        };
        
        let mappedCount = 0;
        let defaultCount = 0;
        
        for (const category of categories) {
            const mapping = mapCategoryToOvoko(category.name);
            
            if (mapping.confidence === "keyword_match") {
                mappedCount++;
            } else {
                defaultCount++;
            }
            
            correctMapping.categories[category.category_id] = {
                baselinker: {
                    category_id: category.category_id,
                    name: category.name,
                    parent_id: category.parent_id
                },
                ovoko_mapping: mapping
            };
        }
        
        // Zapisz poprawne mapowanie
        await fs.writeFile('ovoko_mapping_correct.json', JSON.stringify(correctMapping, null, 2), 'utf8');
        
        console.log('\nüéâ Poprawne mapowanie utworzone!');
        console.log(`üìä Statystyki:`);
        console.log(`   - ≈ÅƒÖcznie kategorii: ${categories.length}`);
        console.log(`   - Pomapowanych przez s≈Çowa kluczowe: ${mappedCount}`);
        console.log(`   - Domy≈õlnych (inne czƒô≈õci): ${defaultCount}`);
        console.log(`   - Plik: ovoko_mapping_correct.json`);
        console.log(`   - U≈ºywam tylko TOP-TIER kategorii Ovoko (level 1)`);
        
        // Zapisz r√≥wnie≈º statystyki
        const stats = {
            total_categories: categories.length,
            mapped_by_keywords: mappedCount,
            default_mapping: defaultCount,
            mapping_percentage: Math.round((mappedCount / categories.length) * 100),
            ovoko_top_tier_categories: Object.keys(OVOKO_TOP_TIER_CATEGORIES).length,
            timestamp: new Date().toISOString()
        };
        
        await fs.writeFile('mapping_correct_statistics.json', JSON.stringify(stats, null, 2), 'utf8');
        console.log(`   - Statystyki: mapping_correct_statistics.json`);
        
        // Sprawd≈∫ czy wszystkie top-tier kategorie sƒÖ u≈ºywane
        const usedCategories = new Set();
        Object.values(correctMapping.categories).forEach(cat => {
            usedCategories.add(cat.ovoko_mapping.ovoko_id);
        });
        
        console.log(`   - U≈ºyte kategorie Ovoko: ${usedCategories.size}/${Object.keys(OVOKO_TOP_TIER_CATEGORIES).length}`);
        
        // Poka≈º nieu≈ºywane kategorie
        const unusedCategories = Object.keys(OVOKO_TOP_TIER_CATEGORIES).filter(id => !usedCategories.has(id));
        if (unusedCategories.length > 0) {
            console.log(`   - Nieu≈ºywane kategorie: ${unusedCategories.join(', ')}`);
        }
        
    } catch (error) {
        console.error('üí• B≈ÇƒÖd podczas tworzenia poprawnego mapowania:', error.message);
    }
}

// Uruchom je≈õli wywo≈Çano bezpo≈õrednio
if (require.main === module) {
    createCorrectMapping();
}

module.exports = { createCorrectMapping, mapCategoryToOvoko, OVOKO_TOP_TIER_CATEGORIES };
